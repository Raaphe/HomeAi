/* tslint:disable */
/* eslint-disable */
/**
 * Your API v1
 * API v1 documentation with JWT authentication
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiV1UsersGet200ResponseInner
 */
export interface ApiV1UsersGet200ResponseInner {
    /**
     * 
     * @type {number}
     * @memberof ApiV1UsersGet200ResponseInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UsersGet200ResponseInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UsersGet200ResponseInner
     */
    'mail'?: string;
}
/**
 * 
 * @export
 * @interface AuthPost200Response
 */
export interface AuthPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthPost200Response
     */
    'message'?: string;
    /**
     * JWT token for the authenticated user
     * @type {string}
     * @memberof AuthPost200Response
     */
    'data'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthPost200Response
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface AuthPost400Response
 */
export interface AuthPost400Response {
    /**
     * 
     * @type {string}
     * @memberof AuthPost400Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface AuthPostRequest
 */
export interface AuthPostRequest {
    /**
     * User\'s email address
     * @type {string}
     * @memberof AuthPostRequest
     */
    'email'?: string;
    /**
     * User\'s password
     * @type {string}
     * @memberof AuthPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ListingPost201Response
 */
export interface ListingPost201Response {
    /**
     * 
     * @type {number}
     * @memberof ListingPost201Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListingPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ListingPost201Response
     */
    'data'?: boolean;
}
/**
 * 
 * @export
 * @interface ListingPost400Response
 */
export interface ListingPost400Response {
    /**
     * 
     * @type {number}
     * @memberof ListingPost400Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListingPost400Response
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ListingPost400Response
     */
    'data'?: boolean;
}
/**
 * 
 * @export
 * @interface ListingPost500Response
 */
export interface ListingPost500Response {
    /**
     * 
     * @type {number}
     * @memberof ListingPost500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListingPost500Response
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ListingPost500Response
     */
    'data'?: boolean;
}
/**
 * 
 * @export
 * @interface ListingPostRequest
 */
export interface ListingPostRequest {
    /**
     * Email of the user to associate the listing with.
     * @type {string}
     * @memberof ListingPostRequest
     */
    'email'?: string;
    /**
     * Zip code of the property.
     * @type {string}
     * @memberof ListingPostRequest
     */
    'zip_code'?: string;
    /**
     * Number of bathrooms.
     * @type {number}
     * @memberof ListingPostRequest
     */
    'bathrooms'?: number;
    /**
     * Size of the land in square meters.
     * @type {number}
     * @memberof ListingPostRequest
     */
    'land_size'?: number;
    /**
     * State where the property is located.
     * @type {string}
     * @memberof ListingPostRequest
     */
    'state'?: string;
    /**
     * City where the property is located.
     * @type {string}
     * @memberof ListingPostRequest
     */
    'city'?: string;
    /**
     * Size of the building in square meters.
     * @type {number}
     * @memberof ListingPostRequest
     */
    'building_size'?: number;
    /**
     * Type of the property.
     * @type {string}
     * @memberof ListingPostRequest
     */
    'property_type'?: string;
    /**
     * Address of the property.
     * @type {string}
     * @memberof ListingPostRequest
     */
    'address'?: string;
    /**
     * Unique identifier for the property.
     * @type {string}
     * @memberof ListingPostRequest
     */
    'property_id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListingPostRequest
     */
    'images'?: Array<string>;
    /**
     * Number of bedrooms.
     * @type {number}
     * @memberof ListingPostRequest
     */
    'bedrooms'?: number;
    /**
     * URL of the property listing.
     * @type {string}
     * @memberof ListingPostRequest
     */
    'url'?: string;
    /**
     * Description of the property.
     * @type {string}
     * @memberof ListingPostRequest
     */
    'description'?: string;
    /**
     * Pricing information for the property.
     * @type {object}
     * @memberof ListingPostRequest
     */
    'prices'?: object;
}
/**
 * 
 * @export
 * @interface ListingsAvailableGet200Response
 */
export interface ListingsAvailableGet200Response {
    /**
     * Unique identifier of the listing.
     * @type {string}
     * @memberof ListingsAvailableGet200Response
     */
    'id'?: string;
    /**
     * Title or name of the property listing.
     * @type {string}
     * @memberof ListingsAvailableGet200Response
     */
    'title'?: string;
    /**
     * Price of the property.
     * @type {number}
     * @memberof ListingsAvailableGet200Response
     */
    'price'?: number;
    /**
     * Location of the property.
     * @type {string}
     * @memberof ListingsAvailableGet200Response
     */
    'location'?: string;
    /**
     * Other relevant fields of the ListingDetailed object.
     * @type {any}
     * @memberof ListingsAvailableGet200Response
     */
    '[ other_properties ]'?: any;
}
/**
 * 
 * @export
 * @interface ListingsAvailableGet400Response
 */
export interface ListingsAvailableGet400Response {
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableGet400Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface ListingsAvailableGet404Response
 */
export interface ListingsAvailableGet404Response {
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableGet404Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ListingsAvailableGet500Response
 */
export interface ListingsAvailableGet500Response {
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableGet500Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface ListingsAvailableZipCodePost200Response
 */
export interface ListingsAvailableZipCodePost200Response {
    /**
     * 
     * @type {number}
     * @memberof ListingsAvailableZipCodePost200Response
     */
    'total_number_of_listings'?: number;
    /**
     * 
     * @type {Array<ListingsAvailableZipCodePost200ResponseListingsInner>}
     * @memberof ListingsAvailableZipCodePost200Response
     */
    'listings'?: Array<ListingsAvailableZipCodePost200ResponseListingsInner>;
}
/**
 * 
 * @export
 * @interface ListingsAvailableZipCodePost200ResponseListingsInner
 */
export interface ListingsAvailableZipCodePost200ResponseListingsInner {
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'zip_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'property_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'bedrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'bathrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'building_size'?: number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'prices'?: { [key: string]: number; };
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListingsAvailableZipCodePost200ResponseListingsInner
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ListingsAvailableZipCodePostRequest
 */
export interface ListingsAvailableZipCodePostRequest {
    /**
     * The number of listings to retrieve.
     * @type {number}
     * @memberof ListingsAvailableZipCodePostRequest
     */
    'number_of_listings'?: number;
}
/**
 * 
 * @export
 * @interface RegisterPost201Response
 */
export interface RegisterPost201Response {
    /**
     * JWT token for the registered user
     * @type {string}
     * @memberof RegisterPost201Response
     */
    'data'?: string;
    /**
     * 
     * @type {number}
     * @memberof RegisterPost201Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RegisterPost201Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface RegisterPost400Response
 */
export interface RegisterPost400Response {
    /**
     * 
     * @type {string}
     * @memberof RegisterPost400Response
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof RegisterPost400Response
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface RegisterPostRequest
 */
export interface RegisterPostRequest {
    /**
     * User\'s first name
     * @type {string}
     * @memberof RegisterPostRequest
     */
    'first_name'?: string;
    /**
     * User\'s last name
     * @type {string}
     * @memberof RegisterPostRequest
     */
    'last_name'?: string;
    /**
     * Name of the user\'s company (optional)
     * @type {string}
     * @memberof RegisterPostRequest
     */
    'company_name'?: string;
    /**
     * User\'s email address
     * @type {string}
     * @memberof RegisterPostRequest
     */
    'email'?: string;
    /**
     * User\'s password
     * @type {string}
     * @memberof RegisterPostRequest
     */
    'password'?: string;
    /**
     * User\'s phone number (optional)
     * @type {string}
     * @memberof RegisterPostRequest
     */
    'phone'?: string;
    /**
     * URL to the user\'s profile picture (optional)
     * @type {string}
     * @memberof RegisterPostRequest
     */
    'pfp'?: string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Authenticates a user with email and password, returning a JWT token upon success.
         * @summary Authenticate user
         * @param {AuthPostRequest} authPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPost: async (authPostRequest: AuthPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authPostRequest' is not null or undefined
            assertParamExists('authPost', 'authPostRequest', authPostRequest)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new user account with the provided details.
         * @summary Register a new user
         * @param {RegisterPostRequest} registerPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost: async (registerPostRequest: RegisterPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerPostRequest' is not null or undefined
            assertParamExists('registerPost', 'registerPostRequest', registerPostRequest)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Authenticates a user with email and password, returning a JWT token upon success.
         * @summary Authenticate user
         * @param {AuthPostRequest} authPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authPost(authPostRequest: AuthPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authPost(authPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new user account with the provided details.
         * @summary Register a new user
         * @param {RegisterPostRequest} registerPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPost(registerPostRequest: RegisterPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPost(registerPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.registerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Authenticates a user with email and password, returning a JWT token upon success.
         * @summary Authenticate user
         * @param {AuthPostRequest} authPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPost(authPostRequest: AuthPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthPost200Response> {
            return localVarFp.authPost(authPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new user account with the provided details.
         * @summary Register a new user
         * @param {RegisterPostRequest} registerPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost(registerPostRequest: RegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterPost201Response> {
            return localVarFp.registerPost(registerPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Authenticates a user with email and password, returning a JWT token upon success.
     * @summary Authenticate user
     * @param {AuthPostRequest} authPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authPost(authPostRequest: AuthPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authPost(authPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new user account with the provided details.
     * @summary Register a new user
     * @param {RegisterPostRequest} registerPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public registerPost(registerPostRequest: RegisterPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).registerPost(registerPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of users from the API. Can be used to populate a list of users in your system.
         * @summary Retrieve a list of users
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiV1UsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of users from the API. Can be used to populate a list of users in your system.
         * @summary Retrieve a list of users
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async apiV1UsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1UsersGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Retrieve a list of users from the API. Can be used to populate a list of users in your system.
         * @summary Retrieve a list of users
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiV1UsersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1UsersGet200ResponseInner>> {
            return localVarFp.apiV1UsersGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Retrieve a list of users from the API. Can be used to populate a list of users in your system.
     * @summary Retrieve a list of users
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UsersGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UsersGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HistoricDataApi - axios parameter creator
 * @export
 */
export const HistoricDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the average price of properties grouped by the number of bathrooms.
         * @summary Get average price by bathrooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyAveragePriceByBathroomsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/average-price-by-bathrooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the average price of properties grouped by the number of bedrooms.
         * @summary Get average price by bedrooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyAveragePriceByBedroomsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/average-price-by-bedrooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the average price of properties for each state.
         * @summary Get average price by state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyAveragePriceByStateGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/average-price-by-state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the count of properties grouped by their size.
         * @summary Get property count by size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyPropertiesCountBySizeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/properties-count-by-size`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the count of properties for each state.
         * @summary Get property count by state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyPropertiesCountByStateGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/properties-count-by-state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the number of sales of properties grouped by year.
         * @summary Get sales by year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historySalesByYearGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/sales-by-year`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoricDataApi - functional programming interface
 * @export
 */
export const HistoricDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HistoricDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the average price of properties grouped by the number of bathrooms.
         * @summary Get average price by bathrooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historyAveragePriceByBathroomsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.historyAveragePriceByBathroomsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HistoricDataApi.historyAveragePriceByBathroomsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the average price of properties grouped by the number of bedrooms.
         * @summary Get average price by bedrooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historyAveragePriceByBedroomsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.historyAveragePriceByBedroomsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HistoricDataApi.historyAveragePriceByBedroomsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the average price of properties for each state.
         * @summary Get average price by state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historyAveragePriceByStateGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.historyAveragePriceByStateGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HistoricDataApi.historyAveragePriceByStateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the count of properties grouped by their size.
         * @summary Get property count by size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historyPropertiesCountBySizeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.historyPropertiesCountBySizeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HistoricDataApi.historyPropertiesCountBySizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the count of properties for each state.
         * @summary Get property count by state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historyPropertiesCountByStateGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.historyPropertiesCountByStateGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HistoricDataApi.historyPropertiesCountByStateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the number of sales of properties grouped by year.
         * @summary Get sales by year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historySalesByYearGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.historySalesByYearGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HistoricDataApi.historySalesByYearGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HistoricDataApi - factory interface
 * @export
 */
export const HistoricDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HistoricDataApiFp(configuration)
    return {
        /**
         * Returns the average price of properties grouped by the number of bathrooms.
         * @summary Get average price by bathrooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyAveragePriceByBathroomsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.historyAveragePriceByBathroomsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the average price of properties grouped by the number of bedrooms.
         * @summary Get average price by bedrooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyAveragePriceByBedroomsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.historyAveragePriceByBedroomsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the average price of properties for each state.
         * @summary Get average price by state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyAveragePriceByStateGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.historyAveragePriceByStateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the count of properties grouped by their size.
         * @summary Get property count by size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyPropertiesCountBySizeGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.historyPropertiesCountBySizeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the count of properties for each state.
         * @summary Get property count by state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyPropertiesCountByStateGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.historyPropertiesCountByStateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the number of sales of properties grouped by year.
         * @summary Get sales by year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historySalesByYearGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.historySalesByYearGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoricDataApi - object-oriented interface
 * @export
 * @class HistoricDataApi
 * @extends {BaseAPI}
 */
export class HistoricDataApi extends BaseAPI {
    /**
     * Returns the average price of properties grouped by the number of bathrooms.
     * @summary Get average price by bathrooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDataApi
     */
    public historyAveragePriceByBathroomsGet(options?: RawAxiosRequestConfig) {
        return HistoricDataApiFp(this.configuration).historyAveragePriceByBathroomsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the average price of properties grouped by the number of bedrooms.
     * @summary Get average price by bedrooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDataApi
     */
    public historyAveragePriceByBedroomsGet(options?: RawAxiosRequestConfig) {
        return HistoricDataApiFp(this.configuration).historyAveragePriceByBedroomsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the average price of properties for each state.
     * @summary Get average price by state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDataApi
     */
    public historyAveragePriceByStateGet(options?: RawAxiosRequestConfig) {
        return HistoricDataApiFp(this.configuration).historyAveragePriceByStateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the count of properties grouped by their size.
     * @summary Get property count by size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDataApi
     */
    public historyPropertiesCountBySizeGet(options?: RawAxiosRequestConfig) {
        return HistoricDataApiFp(this.configuration).historyPropertiesCountBySizeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the count of properties for each state.
     * @summary Get property count by state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDataApi
     */
    public historyPropertiesCountByStateGet(options?: RawAxiosRequestConfig) {
        return HistoricDataApiFp(this.configuration).historyPropertiesCountByStateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the number of sales of properties grouped by year.
     * @summary Get sales by year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDataApi
     */
    public historySalesByYearGet(options?: RawAxiosRequestConfig) {
        return HistoricDataApiFp(this.configuration).historySalesByYearGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListingsApi - axios parameter creator
 * @export
 */
export const ListingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new property listing to a user\'s profile.
         * @summary Create a new listing for a user
         * @param {ListingPostRequest} listingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingPost: async (listingPostRequest: ListingPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listingPostRequest' is not null or undefined
            assertParamExists('listingPost', 'listingPostRequest', listingPostRequest)
            const localVarPath = `/listing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListingsApi - functional programming interface
 * @export
 */
export const ListingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new property listing to a user\'s profile.
         * @summary Create a new listing for a user
         * @param {ListingPostRequest} listingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingPost(listingPostRequest: ListingPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingPost(listingPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListingsApi.listingPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ListingsApi - factory interface
 * @export
 */
export const ListingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListingsApiFp(configuration)
    return {
        /**
         * Adds a new property listing to a user\'s profile.
         * @summary Create a new listing for a user
         * @param {ListingPostRequest} listingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingPost(listingPostRequest: ListingPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListingPost201Response> {
            return localVarFp.listingPost(listingPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListingsApi - object-oriented interface
 * @export
 * @class ListingsApi
 * @extends {BaseAPI}
 */
export class ListingsApi extends BaseAPI {
    /**
     * Adds a new property listing to a user\'s profile.
     * @summary Create a new listing for a user
     * @param {ListingPostRequest} listingPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingPost(listingPostRequest: ListingPostRequest, options?: RawAxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingPost(listingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RealEstateAPIApi - axios parameter creator
 * @export
 */
export const RealEstateAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves detailed property information using the provided listing URL.
         * @summary Fetch property details for a given listing URL.
         * @param {string} listingUrl The URL of the property listing to fetch details for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsAvailableGet: async (listingUrl: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listingUrl' is not null or undefined
            assertParamExists('listingsAvailableGet', 'listingUrl', listingUrl)
            const localVarPath = `/listings/available/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (listingUrl !== undefined) {
                localVarQueryParameter['listingUrl'] = listingUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of available properties based on the zip code and optionally the number of listings to retrieve.
         * @summary Retrieve a list of available properties
         * @param {string} zipCode The zip code to search for properties in.
         * @param {ListingsAvailableZipCodePostRequest} [listingsAvailableZipCodePostRequest] Optional body parameter to specify the number of listings to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsAvailableZipCodePost: async (zipCode: string, listingsAvailableZipCodePostRequest?: ListingsAvailableZipCodePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zipCode' is not null or undefined
            assertParamExists('listingsAvailableZipCodePost', 'zipCode', zipCode)
            const localVarPath = `/listings/available/{zip_code}`
                .replace(`{${"zip_code"}}`, encodeURIComponent(String(zipCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listingsAvailableZipCodePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RealEstateAPIApi - functional programming interface
 * @export
 */
export const RealEstateAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RealEstateAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves detailed property information using the provided listing URL.
         * @summary Fetch property details for a given listing URL.
         * @param {string} listingUrl The URL of the property listing to fetch details for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsAvailableGet(listingUrl: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingsAvailableGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsAvailableGet(listingUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealEstateAPIApi.listingsAvailableGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of available properties based on the zip code and optionally the number of listings to retrieve.
         * @summary Retrieve a list of available properties
         * @param {string} zipCode The zip code to search for properties in.
         * @param {ListingsAvailableZipCodePostRequest} [listingsAvailableZipCodePostRequest] Optional body parameter to specify the number of listings to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsAvailableZipCodePost(zipCode: string, listingsAvailableZipCodePostRequest?: ListingsAvailableZipCodePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingsAvailableZipCodePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsAvailableZipCodePost(zipCode, listingsAvailableZipCodePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealEstateAPIApi.listingsAvailableZipCodePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RealEstateAPIApi - factory interface
 * @export
 */
export const RealEstateAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RealEstateAPIApiFp(configuration)
    return {
        /**
         * Retrieves detailed property information using the provided listing URL.
         * @summary Fetch property details for a given listing URL.
         * @param {string} listingUrl The URL of the property listing to fetch details for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsAvailableGet(listingUrl: string, options?: RawAxiosRequestConfig): AxiosPromise<ListingsAvailableGet200Response> {
            return localVarFp.listingsAvailableGet(listingUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of available properties based on the zip code and optionally the number of listings to retrieve.
         * @summary Retrieve a list of available properties
         * @param {string} zipCode The zip code to search for properties in.
         * @param {ListingsAvailableZipCodePostRequest} [listingsAvailableZipCodePostRequest] Optional body parameter to specify the number of listings to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsAvailableZipCodePost(zipCode: string, listingsAvailableZipCodePostRequest?: ListingsAvailableZipCodePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListingsAvailableZipCodePost200Response> {
            return localVarFp.listingsAvailableZipCodePost(zipCode, listingsAvailableZipCodePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RealEstateAPIApi - object-oriented interface
 * @export
 * @class RealEstateAPIApi
 * @extends {BaseAPI}
 */
export class RealEstateAPIApi extends BaseAPI {
    /**
     * Retrieves detailed property information using the provided listing URL.
     * @summary Fetch property details for a given listing URL.
     * @param {string} listingUrl The URL of the property listing to fetch details for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateAPIApi
     */
    public listingsAvailableGet(listingUrl: string, options?: RawAxiosRequestConfig) {
        return RealEstateAPIApiFp(this.configuration).listingsAvailableGet(listingUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of available properties based on the zip code and optionally the number of listings to retrieve.
     * @summary Retrieve a list of available properties
     * @param {string} zipCode The zip code to search for properties in.
     * @param {ListingsAvailableZipCodePostRequest} [listingsAvailableZipCodePostRequest] Optional body parameter to specify the number of listings to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateAPIApi
     */
    public listingsAvailableZipCodePost(zipCode: string, listingsAvailableZipCodePostRequest?: ListingsAvailableZipCodePostRequest, options?: RawAxiosRequestConfig) {
        return RealEstateAPIApiFp(this.configuration).listingsAvailableZipCodePost(zipCode, listingsAvailableZipCodePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



